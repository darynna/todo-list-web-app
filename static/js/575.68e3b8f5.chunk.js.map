{"version":3,"file":"static/js/575.68e3b8f5.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/FormPage/FormPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormWrap = styled.div`\n  margin-top: 64px;\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 767px) {\n    width: 298px;\n  }\n`;\n\nexport const FormGroup = styled.div`\n  margin-bottom: 20px;\n\n  .field {\n    width: 380px;\n    padding: 8px;\n    font-size: 16px;\n    border: 1px solid #0056b3;\n  }\n\n  @media screen and (max-width: 767px) {\n    .field {\n      width: 280px;\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  color: #0056b3;\n`;\n\nexport const InputStyled = styled(Field)`\n  width: 380px;\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #0056b3;\n\n  @media screen and (max-width: 767px) {\n    width: 280px;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: #e63900;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: #1e90ff;\n  color: #fff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const FormDescriptionText = styled.p`\n  max-width: 600px;\n  margin: 0 auto;\n  margin-bottom: 24px;\n  text-align: center;\n  color: #1e90ff;\n  font-size: 24px;\n  font-weight: bold;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../../redux/tasks/tasksSlice';\nimport { Formik, Field } from 'formik';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport {\n  StyledForm,\n  FormGroup,\n  Label,\n  InputStyled,\n  ErrorMsg,\n  SubmitButton,\n  FormDescriptionText,\n  FormWrap,\n} from './Form.styled';\n\nimport { nanoid } from 'nanoid';\n\nconst TaskForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      addTask({\n        name: values.taskName,\n        description: values.description,\n        completed: false,\n        dueDate: values.dueDate,\n        id: nanoid(),\n      })\n    );\n    Notify.success('Task was created!');\n    resetForm();\n  };\n\n  const validate = values => {\n    const errors = {};\n    if (!values.taskName.trim()) {\n      errors.taskName = 'Task name is required';\n    }\n    if (!values.description.trim()) {\n      errors.description = 'Description is required';\n    }\n    if (values.dueDate) {\n      const dueDate = new Date(values.dueDate);\n      const currentDate = new Date();\n      if (dueDate < currentDate) {\n        errors.dueDate = 'Please choose a future date';\n      }\n    }\n    return errors;\n  };\n\n  return (\n    <FormWrap>\n      <FormDescriptionText>\n        Welcome to the task creation form. Please fill out the following fields\n        to add a new task to your to-do list. Provide a title for the task in\n        the designated field, along with a description.\n      </FormDescriptionText>\n      <Formik\n        initialValues={{ taskName: '', description: '', dueDate: '' }}\n        validate={validate}\n        onSubmit={(values, { resetForm }) => {\n          handleSubmit(values, { resetForm });\n        }}\n      >\n        {({ isSubmitting }) => (\n          <StyledForm>\n            <FormGroup>\n              <Label htmlFor=\"taskName\">Task Name:</Label>\n              <InputStyled type=\"text\" id=\"taskName\" name=\"taskName\" />\n              <ErrorMsg name=\"taskName\" component=\"div\" className=\"error\" />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"description\">Description:</Label>\n              <Field\n                className=\"field\"\n                as=\"textarea\"\n                id=\"description\"\n                name=\"description\"\n              />\n              <ErrorMsg name=\"description\" component=\"div\" className=\"error\" />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"dueDate\">Due Date:</Label>\n              <InputStyled type=\"date\" id=\"dueDate\" name=\"dueDate\" />\n              <ErrorMsg name=\"dueDate\" component=\"div\" className=\"error\" />\n            </FormGroup>\n            <SubmitButton type=\"submit\">Add Task</SubmitButton>\n          </StyledForm>\n        )}\n      </Formik>\n    </FormWrap>\n  );\n};\n\nexport default TaskForm;\n","import TaskForm from 'components/Form/Form';\n\nconst FormPage = () => {\n  return <TaskForm />;\n};\n\nexport default FormPage;\n"],"names":["FormWrap","styled","_templateObject","_taggedTemplateLiteral","StyledForm","Form","_templateObject2","FormGroup","_templateObject3","Label","_templateObject4","InputStyled","Field","_templateObject5","ErrorMsg","ErrorMessage","_templateObject6","SubmitButton","_templateObject7","FormDescriptionText","_templateObject8","dispatch","useDispatch","_jsxs","children","_jsx","Formik","initialValues","taskName","description","dueDate","validate","values","errors","trim","Date","onSubmit","_ref2","_ref","resetForm","addTask","name","completed","id","nanoid","Notify","handleSubmit","_ref3","isSubmitting","htmlFor","type","component","className","as","TaskForm"],"sourceRoot":""}