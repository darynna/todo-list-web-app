{"version":3,"file":"static/js/818.80accbf0.chunk.js","mappings":"sLAEaA,E,QAAYC,GAAAA,EAAQC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yI,SCSjC,EAT2B,SAAHC,GAAgB,IAAXC,EAAID,EAAJC,KAE3B,OACEC,EAAAA,EAAAA,KAACN,EAAS,CAAAO,SACPF,GAGP,C,sHCPaG,EAAeP,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iMAWxBM,EAAWR,EAAAA,GAAAA,GAASS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,6BAKpBQ,EAAkBV,EAAAA,GAAAA,EAAQW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,kDAK1BU,EAAeZ,EAAAA,GAAAA,OAAaa,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,2QAgB5BY,GAAed,EAAAA,EAAAA,IAAOY,EAAPZ,CAAoBe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,yF,mBCJhD,EA7BiB,SAAHC,GAAkB,IAAZa,EAAIb,EAAJa,KACZC,GAAWC,EAAAA,EAAAA,MAYnB,OACEC,EAAAA,EAAAA,MAACZ,EAAY,CAAAD,SAAA,EACXa,EAAAA,EAAAA,MAAA,OAAAb,SAAA,EACAD,EAAAA,EAAAA,KAACG,EAAQ,CAAAF,SAAEU,EAAKI,QACdf,EAAAA,EAAAA,KAACK,EAAe,CAAAJ,SAAEU,EAAKK,kBAEzBF,EAAAA,EAAAA,MAAA,OAAAb,SAAA,EACED,EAAAA,EAAAA,KAACO,EAAY,CAACU,QAjBW,WAC7BL,GAASM,EAAAA,EAAAA,IAAaP,EAAKQ,KAC3BC,EAAAA,OAAAA,QAAe,kCACjB,EAcoDnB,SAC3CU,EAAKU,UAAY,kBAAoB,cAExCrB,EAAAA,EAAAA,KAACS,EAAY,CAACQ,QAfC,WACnBL,GAASU,EAAAA,EAAAA,IAAWX,EAAKQ,KACzBC,EAAAA,OAAAA,QAAe,oBACjB,EAY0CnB,SAAC,gBATtBU,EAAKQ,GAa1B,EC/BaI,EAAW5B,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+BCiBjC,EAhBkB,SAAHC,GAAiB,IAAZ0B,EAAK1B,EAAL0B,MAElB,OACExB,EAAAA,EAAAA,KAACuB,EAAQ,CAAAtB,SACW,IAAjBuB,EAAMC,QACLD,EAAME,KAAI,SAACf,GAET,OACEX,EAAAA,EAAAA,KAAC2B,EAAQ,CAAehB,KAAMA,GAAfA,EAAKQ,GAGxB,KAGR,C,mFCKA,UAjB8B,WAC1B,IAEMS,GAFaC,EAAAA,EAAAA,IAAYC,EAAAA,GAEMC,QAAO,SAAAC,GAAI,OAAKA,EAAKX,SAAS,IAEnE,OACIrB,EAAAA,EAAAA,KAAAiC,EAAAA,SAAA,CAAAhC,SAC8B,IAA7B2B,EAAkBH,QACjBzB,EAAAA,EAAAA,KAACkC,EAAAA,EAAkB,CAACnC,KAAM,kHAE1BC,EAAAA,EAAAA,KAACmC,EAAAA,EAAS,CAACX,MAAOI,KAK5B,C,uDCpBO,IAAME,EAAc,SAACM,GAAK,OAAKA,EAAMC,MAAMA,KAAM,C","sources":["components/EmptyPageComponent/EmptyPageComponent.styled.jsx","components/EmptyPageComponent/EmptyPageComponent.jsx","components/TaskItem/TaskItem.styled.jsx","components/TaskItem/TaskItem.jsx","components/TasksList/TasksList.styled.jsx","components/TasksList/TasksList.jsx","pages/NotCompletedTasksPage/NotCompletedTasksPage.jsx","redux/tasks/tasksSelectors.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Paragraph = styled.p`\nwidth: 600px;\nmargin: 0 auto;\nmargin-top: 64px;\ntext-align: center;\ncolor: #1e90ff;\nfont-size: 24px;\nfont-weight: bold;\n`;","import { Paragraph } from \"./EmptyPageComponent.styled\";\n\nconst EmptyPageComponent = ({text}) => {\n\n  return (\n    <Paragraph>\n      {text}\n    </Paragraph>\n  );\n};\n\nexport default EmptyPageComponent;","import styled from \"styled-components\";\n\nexport const TaskListItem = styled.li`\n  width: 800px;\n  display: flex;\n  justify-content: space-between;\n  margin:0 auto;\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 10px;\n`;\n\nexport const TaskName = styled.h3`\n  color: #0056b3;\n`;\n\n\nexport const TaskDescription = styled.p`\n  color: #333;\n  margin-bottom: 10px;\n`;\n\nexport const ActionButton = styled.button`\nwidth: 150px;\n  background-color: #1e90ff;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const DeleteButton = styled(ActionButton)`\n  background-color:#ff7070;\n  &:hover {\n    background-color: #e63900;\n  }\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { completeTask, deleteTask } from \"../../redux/tasks/tasksSlice\";\nimport { TaskListItem, TaskName, TaskDescription, ActionButton, DeleteButton } from './TaskItem.styled';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst TaskItem = ({ date }) => {\n  const dispatch = useDispatch();\n\nconst handleToggleCompletion = () => {\n  dispatch(completeTask(date.id)); \n  Notify.success('Status of the task was changed!');\n};\n\nconst handleDelete = () => {\n  dispatch(deleteTask(date.id)); \n  Notify.success('Task was deleted!');\n};\n\nreturn (\n  <TaskListItem key={date.id}>\n    <div>\n    <TaskName>{date.name}</TaskName>\n      <TaskDescription>{date.description}</TaskDescription>\n    </div>\n    <div>\n      <ActionButton onClick={handleToggleCompletion}>\n        {date.completed ? 'Mark Incomplete' : 'Complete'}\n      </ActionButton>\n      <DeleteButton onClick={handleDelete}>Delete</DeleteButton>\n      </div>\n  </TaskListItem>\n);\n};\n\nexport default TaskItem;","import styled from \"styled-components\";\n\nexport const TaskList = styled.ul`\n  margin-top: 64px;\n`;","import TaskItem from \"components/TaskItem/TaskItem\";\nimport { TaskList } from \"./TasksList.styled\";\n\nconst TasksList = ({array}) => {\n\n  return (\n    <TaskList>\n      {array.length !== 0 &&\n        array.map((date) => {\n\n          return (\n            <TaskItem key={date.id} date={date}\n            />\n          );\n        })}\n    </TaskList>\n  );\n};\n\nexport default TasksList;","import TasksList from \"components/TasksList/TasksList\";\nimport { useSelector } from \"react-redux\";\nimport { selectTasks } from \"../../redux/tasks/tasksSelectors\";\nimport EmptyPageComponent from \"components/EmptyPageComponent/EmptyPageComponent\";\n\nconst NotCompletedTasksPage = () => {\n    const tasksArray = useSelector(selectTasks);\n\n    const notcompletedTasks = tasksArray.filter(task => !task.completed);\n\n    return(\n        <>\n        {notcompletedTasks.length === 0 ? (\n          <EmptyPageComponent text={\"You haven't added any tasks here yet. Use the form to create new tasks and start organizing your to-do list!\"}/>\n        ) : (\n          <TasksList array={notcompletedTasks} />\n        )}\n      </>\n    )\n    \n}\n\nexport default NotCompletedTasksPage","export const selectTasks = (state) => state.tasks.tasks;"],"names":["Paragraph","styled","_templateObject","_taggedTemplateLiteral","_ref","text","_jsx","children","TaskListItem","TaskName","_templateObject2","TaskDescription","_templateObject3","ActionButton","_templateObject4","DeleteButton","_templateObject5","date","dispatch","useDispatch","_jsxs","name","description","onClick","completeTask","id","Notify","completed","deleteTask","TaskList","array","length","map","TaskItem","notcompletedTasks","useSelector","selectTasks","filter","task","_Fragment","EmptyPageComponent","TasksList","state","tasks"],"sourceRoot":""}