{"version":3,"file":"static/js/575.957a1cd4.chunk.js","mappings":"2QAGaA,EAAWC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+BAIrBC,GAAaH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAYK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,+FAOzBI,EAAYN,EAAAA,GAAAA,IAAUO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,+IAWtBM,EAAQR,EAAAA,GAAAA,MAAYS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,sEAMpBQ,GAAcV,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAaY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,6FAO3BW,GAAWb,EAAAA,EAAAA,IAAOc,EAAAA,GAAPd,CAAoBe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,6BAI/Bc,EAAehB,EAAAA,GAAAA,OAAaiB,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,mOAc5BgB,EAAsBlB,EAAAA,GAAAA,EAAQmB,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,0J,kBCsB3C,EA3DiB,WACf,IAAMkB,GAAWC,EAAAA,EAAAA,MAejB,OACEC,EAAAA,EAAAA,MAACvB,EAAQ,CAAAwB,SAAA,EACJC,EAAAA,EAAAA,KAACN,EAAmB,CAAAK,SAAC,mMAK1BC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAEC,SAAU,GAAIC,YAAa,IAC5CC,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAOhB,OANKD,EAAOH,WACVI,EAAOJ,SAAW,yBAEfG,EAAOF,cACVG,EAAOH,YAAc,2BAEhBG,CACT,EACAC,SAAU,SAACF,EAAMG,IAhCA,SAACH,EAAMI,GAAqB,IAAjBC,EAASD,EAATC,UAC9Bf,GACEgB,EAAAA,EAAAA,IAAQ,CACNC,KAAMP,EAAOH,SACbC,YAAaE,EAAOF,YACpBU,WAAW,EACXC,IAAIC,EAAAA,EAAAA,SAGRC,EAAAA,OAAAA,QAAe,qBACfN,GACF,CAsBMO,CAAaZ,EAAQ,CAAEK,UADKF,EAATE,WAErB,EAAEZ,SAED,SAAAoB,GAAeA,EAAZC,aAAY,OACdtB,EAAAA,EAAAA,MAACnB,EAAU,CAAAoB,SAAA,EACTD,EAAAA,EAAAA,MAAChB,EAAS,CAAAiB,SAAA,EACRC,EAAAA,EAAAA,KAAChB,EAAK,CAACqC,QAAQ,WAAUtB,SAAC,gBAC1BC,EAAAA,EAAAA,KAACd,EAAW,CAACoC,KAAK,OAAOP,GAAG,WAAWF,KAAK,cAC5Cb,EAAAA,EAAAA,KAACX,EAAQ,CAACwB,KAAK,WAAWU,UAAU,MAAMC,UAAU,cAEtD1B,EAAAA,EAAAA,MAAChB,EAAS,CAAAiB,SAAA,EACRC,EAAAA,EAAAA,KAAChB,EAAK,CAACqC,QAAQ,cAAatB,SAAC,kBAC7BC,EAAAA,EAAAA,KAACb,EAAAA,GAAK,CAACqC,UAAU,QAAQC,GAAG,WAAWV,GAAG,cAAcF,KAAK,iBAC7Db,EAAAA,EAAAA,KAACX,EAAQ,CAACwB,KAAK,cAAcU,UAAU,MAAMC,UAAU,cAEzDxB,EAAAA,EAAAA,KAACR,EAAY,CAAC8B,KAAK,SAAQvB,SAAC,eACjB,MAKrB,ECpEA,EANiB,WACb,OACIC,EAAAA,EAAAA,KAAC0B,EAAQ,GAEjB,C","sources":["components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/FormPage/FormPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormWrap = styled.div`\n  margin-top: 64px;\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  max-width: 400px;\n  margin: 0 auto;\n`;\n\nexport const FormGroup = styled.div`\n  margin-bottom: 20px;\n\n  .field{\n    width: 380px;\n    padding: 8px;\n    font-size: 16px;\n    border: 1px solid #0056b3\n  }\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  color: #0056b3\n`;\n\nexport const InputStyled = styled(Field)`\n  width: 380px;\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #0056b3\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: #e63900;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: #1e90ff;\n  color: #fff;\n  border: none;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s; \n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const FormDescriptionText = styled.p`\n  width: 600px;\n  margin: 0 auto;\n  margin-bottom: 24px;\n  text-align: center;\n  color: #1e90ff;\n  font-size: 24px;\n  font-weight: bold;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../../redux/tasks/tasksSlice';\nimport { Formik, Field } from 'formik';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport {\n  StyledForm,\n  FormGroup,\n  Label,\n  InputStyled,\n  ErrorMsg,\n  SubmitButton,\n  FormDescriptionText,\n  FormWrap,\n  \n} from './Form.styled';\n\nimport { nanoid } from 'nanoid';\n\nconst TaskForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      addTask({\n        name: values.taskName,\n        description: values.description,\n        completed: false,\n        id: nanoid(),\n      })\n    );\n    Notify.success('Task was created!');\n    resetForm();\n  };\n\n  return (\n    <FormWrap>\n         <FormDescriptionText>\n        Welcome to the task creation form. Please fill out the following fields\n        to add a new task to your to-do list. Provide a title for the task in\n        the designated field, along with a description.\n      </FormDescriptionText>\n    <Formik\n      initialValues={{ taskName: '', description: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.taskName) {\n          errors.taskName = 'Task name is required';\n        }\n        if (!values.description) {\n          errors.description = 'Description is required';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { resetForm }) => {\n        handleSubmit(values, { resetForm });\n      }}\n    >\n      {({ isSubmitting }) => (\n        <StyledForm>\n          <FormGroup>\n            <Label htmlFor=\"taskName\">Task Name:</Label>\n            <InputStyled type=\"text\" id=\"taskName\" name=\"taskName\" />\n            <ErrorMsg name=\"taskName\" component=\"div\" className=\"error\" />\n          </FormGroup>\n          <FormGroup>\n            <Label htmlFor=\"description\">Description:</Label>\n            <Field className='field' as=\"textarea\" id=\"description\" name=\"description\"/>\n            <ErrorMsg name=\"description\" component=\"div\" className=\"error\" />\n          </FormGroup>\n          <SubmitButton type=\"submit\">Add Task</SubmitButton>\n        </StyledForm>\n      )}\n    </Formik>\n    </FormWrap>\n  );\n};\n\nexport default TaskForm;\n","import TaskForm from \"components/Form/Form\"\n\nconst FormPage = () => {\n    return(\n        <TaskForm/>\n    )\n}\n\nexport default FormPage"],"names":["FormWrap","styled","_templateObject","_taggedTemplateLiteral","StyledForm","Form","_templateObject2","FormGroup","_templateObject3","Label","_templateObject4","InputStyled","Field","_templateObject5","ErrorMsg","ErrorMessage","_templateObject6","SubmitButton","_templateObject7","FormDescriptionText","_templateObject8","dispatch","useDispatch","_jsxs","children","_jsx","Formik","initialValues","taskName","description","validate","values","errors","onSubmit","_ref2","_ref","resetForm","addTask","name","completed","id","nanoid","Notify","handleSubmit","_ref3","isSubmitting","htmlFor","type","component","className","as","TaskForm"],"sourceRoot":""}