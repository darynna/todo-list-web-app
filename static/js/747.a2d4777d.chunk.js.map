{"version":3,"file":"static/js/747.a2d4777d.chunk.js","mappings":"uOAIYA,EAAWC,EAAQ,KAAvBC,GAgDR,EA9CiB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAEC,SAAU,GAAIC,YAAa,IAC5CC,SAAU,SAACC,GACT,IAAMC,EAAS,CAAC,EAOhB,OANKD,EAAOH,WACVI,EAAOJ,SAAW,yBAEfG,EAAOF,cACVG,EAAOH,YAAc,2BAEhBG,CACT,EACAC,SAAU,SAACF,EAAMG,IAlBA,SAACH,EAAMI,GAAqB,IAAjBC,EAASD,EAATC,UAC9Bb,GAASc,EAAAA,EAAAA,IAAQ,CAAEC,KAAMP,EAAOH,SAAUC,YAAaE,EAAOF,YAAaU,WAAW,EAAOC,GAAIpB,OACjGgB,GACF,CAgBMK,CAAaV,EAAQ,CAAEK,UADKF,EAATE,WAErB,EAAEM,SAED,SAAAC,GAAeA,EAAZC,aAAY,OACdC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAJ,SAAA,EACHG,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEjB,EAAAA,EAAAA,KAAA,SAAOsB,QAAQ,WAAUL,SAAC,gBAC1BjB,EAAAA,EAAAA,KAACuB,EAAAA,GAAK,CAACC,KAAK,OAAOT,GAAG,WAAWF,KAAK,cACtCb,EAAAA,EAAAA,KAACyB,EAAAA,GAAY,CAACZ,KAAK,WAAWa,UAAU,MAAMC,UAAU,cAE1DP,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEjB,EAAAA,EAAAA,KAAA,SAAOsB,QAAQ,cAAaL,SAAC,kBAC7BjB,EAAAA,EAAAA,KAACuB,EAAAA,GAAK,CAACK,GAAG,WAAWb,GAAG,cAAcF,KAAK,iBAC3Cb,EAAAA,EAAAA,KAACyB,EAAAA,GAAY,CAACZ,KAAK,cAAca,UAAU,MAAMC,UAAU,cAE7D3B,EAAAA,EAAAA,KAAA,UAAQwB,KAAK,SAAQP,SAAC,eAGjB,GAIf,EC1CA,EANiB,WACb,OACIjB,EAAAA,EAAAA,KAAC6B,EAAQ,GAEjB,C","sources":["components/Form/Form.jsx","pages/FormPage/FormPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../../redux/tasks/tasksSlice';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nconst { v4: uuidv4 } = require('uuid');\n\nconst TaskForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(addTask({ name: values.taskName, description: values.description, completed: false, id: uuidv4() }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ taskName: '', description: '' }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.taskName) {\n          errors.taskName = 'Task name is required';\n        }\n        if (!values.description) {\n          errors.description = 'Description is required';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { resetForm }) => {\n        handleSubmit(values, { resetForm }); \n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <div>\n            <label htmlFor=\"taskName\">Task Name:</label>\n            <Field type=\"text\" id=\"taskName\" name=\"taskName\" />\n            <ErrorMessage name=\"taskName\" component=\"div\" className=\"error\" />\n          </div>\n          <div>\n            <label htmlFor=\"description\">Description:</label>\n            <Field as=\"textarea\" id=\"description\" name=\"description\" />\n            <ErrorMessage name=\"description\" component=\"div\" className=\"error\" />\n          </div>\n          <button type=\"submit\">\n            Add Task\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default TaskForm;","import TaskForm from \"components/Form/Form\"\n\nconst FormPage = () => {\n    return(\n        <TaskForm/>\n    )\n}\n\nexport default FormPage"],"names":["uuidv4","require","v4","dispatch","useDispatch","_jsx","Formik","initialValues","taskName","description","validate","values","errors","onSubmit","_ref2","_ref","resetForm","addTask","name","completed","id","handleSubmit","children","_ref3","isSubmitting","_jsxs","Form","htmlFor","Field","type","ErrorMessage","component","className","as","TaskForm"],"sourceRoot":""}