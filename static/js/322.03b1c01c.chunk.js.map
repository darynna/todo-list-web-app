{"version":3,"file":"static/js/322.03b1c01c.chunk.js","mappings":"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","sources":["components/EmptyPageComponent/EmptyPageComponent.styled.jsx","components/EmptyPageComponent/EmptyPageComponent.jsx","components/TaskPagesTitle/TaskPagesTitle.styled.jsx","components/TaskPagesTitle/TaskPagesTitle.jsx","components/TaskSearch/TaskSearch.styled.jsx","components/TaskSearch/TaskSearch.jsx","components/TaskItem/TaskItem.styled.jsx","components/TaskItem/TaskItem.jsx","components/TasksList/TasksList.styled.jsx","components/TasksList/TasksList.jsx","pages/CompletedTasksPage/CompletedTasksPage.jsx","redux/tasks/tasksSelectors.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Paragraph = styled.p`\nwidth: 600px;\nmargin: 0 auto;\nmargin-top: 64px;\ntext-align: center;\ncolor: #1e90ff;\nfont-size: 24px;\nfont-weight: bold;\n`;","import { Paragraph } from './EmptyPageComponent.styled';\n\nconst EmptyPageComponent = ({ text }) => {\n  return <Paragraph>{text}</Paragraph>;\n};\n\nexport default EmptyPageComponent;\n","import styled from \"styled-components\";\n\nexport const TaskPageTitleStyled = styled.p`\nmargin: 0 auto;\nmargin-top: 64px;\ntext-align: center;\ncolor: #1e90ff;\nfont-size: 24px;\nfont-weight: bold;\n`;","import { TaskPageTitleStyled } from './TaskPagesTitle.styled';\n\nconst TaskPageTitle = ({ text }) => {\n  return <TaskPageTitleStyled>{text}</TaskPageTitleStyled>;\n};\n\nexport default TaskPageTitle;\n","import styled from 'styled-components';\n\n\nexport const InputBoxStyled = styled.div`\n margin-top: 16px;\n display: flex;\n justify-content: center;\n`;\n\nexport const InputStyled = styled.input`\n  width: 380px;\n  padding: 8px;\n  font-size: 16px;\n  border: 1px solid #0056b3;\n\n  @media screen and (max-width: 767px) {\n    width: 236px;\n  }\n`;\n\n\nexport const InputButtonStyled = styled.button`\n  font-size: 24px;\n  background-color: #8ed1fa;\n  color: white;\n  border: none;\n  border-radius: 3px;\n\n\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateSearchFilter } from '../../redux/tasks/tasksSlice';\nimport {\n  InputStyled,\n  InputBoxStyled,\n  InputButtonStyled,\n} from './TaskSearch.styled';\nimport { IoSearch } from 'react-icons/io5';\nimport { selectFilter } from '../../redux/tasks/tasksSelectors';\n\nconst TaskSearch = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const dispatch = useDispatch();\n\n  const filterValue = useSelector(selectFilter);\n\n  useEffect(() => {\n    setSearchQuery(filterValue);\n  }, [filterValue]);\n\n  const handleSearchChange = event => {\n    const { value } = event.target;\n    setSearchQuery(value);\n    dispatch(updateSearchFilter(value));\n  };\n\n  return (\n    <InputBoxStyled>\n      <InputStyled\n        type=\"text\"\n        placeholder=\"Search tasks...\"\n        value={searchQuery}\n        onChange={handleSearchChange}\n      />\n      <InputButtonStyled>\n        <IoSearch />\n      </InputButtonStyled>\n    </InputBoxStyled>\n  );\n};\n\nexport default TaskSearch;\n","import styled from 'styled-components';\n\nexport const TaskListItem = styled.li`\n  max-width: 800px;\n  display: flex;\n  justify-content: space-between;\n  margin: 0 auto;\n  // background-color: #f5f5f5;\n  background-color: ${props =>\n    props.completed === 'true' ? '#d3d3d3' : '#f5f5f5'};\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 10px;\n`;\n\nexport const TaskName = styled.h3`\n  color: #0056b3;\n`;\n\nexport const TaskDescription = styled.p`\n  color: #333;\n  margin-bottom: 10px;\n`;\n\nexport const ActionButton = styled.button`\n  width: 150px;\n  background-color: #1e90ff;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nexport const DeleteButton = styled(ActionButton)`\n  background-color: #ff7070;\n  &:hover {\n    background-color: #e63900;\n  }\n`;\n\nexport const TaskDate = styled.p`\n  color: #333;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { completeTask, deleteTask } from '../../redux/tasks/tasksSlice';\nimport {\n  TaskListItem,\n  TaskName,\n  TaskDescription,\n  ActionButton,\n  DeleteButton,\n  TaskDate,\n} from './TaskItem.styled';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst TaskItem = ({ date }) => {\n  const dispatch = useDispatch();\n\n  const handleToggleCompletion = () => {\n    dispatch(completeTask(date.id));\n    Notify.success('Status of the task was changed!');\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteTask(date.id));\n    Notify.success('Task was deleted!');\n  };\n\n  return (\n    <TaskListItem key={date.id} completed={date.completed ? 'true' : 'false'}>\n      <div>\n        <TaskName>{date.name}</TaskName>\n        <TaskDescription>{date.description}</TaskDescription>\n      </div>\n      <div>\n        <ActionButton onClick={handleToggleCompletion}>\n          {date.completed ? 'Mark Incomplete' : 'Complete'}\n        </ActionButton>\n        <DeleteButton onClick={handleDelete}>Delete</DeleteButton>\n        <>\n          {date.dueDate !== '' ? (\n            <TaskDate>Need to be completed till: {date.dueDate}</TaskDate>\n          ) : null}\n        </>\n      </div>\n    </TaskListItem>\n  );\n};\n\nexport default TaskItem;\n","import styled from \"styled-components\";\n\nexport const TaskList = styled.ul`\n  margin-top: 18px;\n`;","import TaskItem from 'components/TaskItem/TaskItem';\nimport { TaskList } from './TasksList.styled';\n\nconst TasksList = ({ array }) => {\n  return (\n    <TaskList>\n      {array.length !== 0 &&\n        array.map(date => {\n          return <TaskItem key={date.id} date={date} />;\n        })}\n    </TaskList>\n  );\n};\n\nexport default TasksList;\n","import TasksList from 'components/TasksList/TasksList';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleCompletedTasks } from '../../redux/tasks/tasksSelectors';\nimport EmptyPageComponent from 'components/EmptyPageComponent/EmptyPageComponent';\nimport TaskSearch from 'components/TaskSearch/TaskSearch';\nimport TaskPageTitle from 'components/TaskPagesTitle/TaskPagesTitle';\n\nconst CompletedTasksPage = () => {\n  const visibleCompletedTasks = useSelector(selectVisibleCompletedTasks);\n\n  return (\n    <>\n      <TaskPageTitle text={'Completed Tasks:'} />\n      <TaskSearch />\n      {visibleCompletedTasks.length === 0 ? (\n        <EmptyPageComponent\n          text={\n            \"You haven't completed any tasks yet. Keep working on your to-do list and mark tasks as complete when you're finished!\"\n          }\n        />\n      ) : (\n        <TasksList array={visibleCompletedTasks} />\n      )}\n    </>\n  );\n};\n\nexport default CompletedTasksPage;\n","import { createSelector } from '@reduxjs/toolkit';\nexport const selectTasks = state => state.tasks.tasks;\nexport const selectFilter = state => state.tasks.searchFilter;\n\nexport const selectVisibleCompletedTasks = createSelector(\n  [selectTasks, selectFilter],\n  (tasks, filter) => {\n    return tasks.filter(\n      task =>\n        task.completed && task.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport const selectVisibleNotCompletedTasks = createSelector(\n  [selectTasks, selectFilter],\n  (tasks, filter) => {\n    return tasks.filter(\n      task =>\n        !task.completed &&\n        task.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["Paragraph","styled","_templateObject","_taggedTemplateLiteral","_ref","text","_jsx","children","TaskPageTitleStyled","InputBoxStyled","InputStyled","_templateObject2","InputButtonStyled","_templateObject3","_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","dispatch","useDispatch","filterValue","useSelector","selectFilter","useEffect","_jsxs","type","placeholder","value","onChange","event","target","updateSearchFilter","IoSearch","TaskListItem","props","completed","TaskName","TaskDescription","ActionButton","_templateObject4","DeleteButton","_templateObject5","TaskDate","_templateObject6","date","name","description","onClick","completeTask","id","Notify","deleteTask","_Fragment","dueDate","TaskList","array","length","map","TaskItem","visibleCompletedTasks","selectVisibleCompletedTasks","TaskPageTitle","TaskSearch","EmptyPageComponent","TasksList","selectTasks","state","tasks","searchFilter","createSelector","filter","task","toLowerCase","includes","selectVisibleNotCompletedTasks"],"sourceRoot":""}